# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ BE-deploy ]
  pull_request:
    branches: [ BE-deploy ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./BE

    steps:
      - uses: actions/checkout@v2

      # JDK11로 gradle 빌드
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Insert data source information into application.yml
        run: |
          sed -i "s|\${DATASOURCE_URL}|$DATASOURCE_URL|g" ./src/main/resources/application.yml
          sed -i "s|\${DATASOURCE_USERNAME}|$DATASOURCE_USERNAME|g" ./src/main/resources/application.yml
          sed -i "s|\${DATASOURCE_PASSWORD}|$DATASOURCE_PASSWORD|g" ./src/main/resources/application.yml

          sed -i "s|\${OAUTH_CLIENT_ID}|$OAUTH_CLIENT_ID|g" ./src/main/resources/oauth.yml
          sed -i "s|\${OAUTH_CLIENT_SECRET}|$OAUTH_CLIENT_SECRET|g" ./src/main/resources/oauth.yml
          sed -i "s|\${OAUTH_ACCESS_SCOPE}|$OAUTH_ACCESS_SCOPE|g" ./src/main/resources/oauth.yml
          sed -i "s|\${OAUTH_LOGIN_FORM_URL}|$OAUTH_LOGIN_FORM_URL|g" ./src/main/resources/oauth.yml
          sed -i "s|\${JWT_ISSUER}|$JWT_ISSUER|g" ./src/main/resources/oauth.yml
          sed -i "s|\${JWT_SECRET_KEY}|$JWT_SECRET_KEY|g" ./src/main/resources/oauth.yml

        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          OAUTH_ACCESS_SCOPE: ${{ secrets.OAUTH_ACCESS_SCOPE }}
          OAUTH_LOGIN_FORM_URL: ${{ secrets.OAUTH_LOGIN_FORM_URL }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

      # 도커 빌드(도커 이미지 생성)
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0 .
          docker push ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0
          docker rmi ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0

      # 도커 이미지 배포 및 실행(EC2 ubuntu20.04로 배포)
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST_DNS }} #(생성한 인스턴스의 DNS주소)
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }} #(인스턴스를 생성할 때 다운받은 pem키안에 값을 모두 복사해서 붙여넣기)
          envs: GITHUB_SHA
          script: |
            sudo docker ps -a -q --filter "name=issue-tracker" | grep -q . && docker stop issue-tracker && docker rm issue-tracker | true
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0
            sudo docker run -d -p 80:8080 --name issue-tracker -e FILE_UPLOAD_S3_ACCESS_KEY=${{ secrets.FILE_UPLOAD_S3_ACCESS_KEY }} -e FILE_UPLOAD_S3_SECRET_KEY=${{ secrets.FILE_UPLOAD_S3_SECRET_KEY }} ${{ secrets.DOCKER_USERNAME }}/issue-tracker:1.0
            sudo docker rmi -f $(docker images -f "dangling=true" -q) || true
