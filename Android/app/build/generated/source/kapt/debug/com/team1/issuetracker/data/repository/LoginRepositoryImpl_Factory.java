// Generated by Dagger (https://dagger.dev).
package com.team1.issuetracker.data.repository;

import com.team1.issuetracker.data.AppSession;
import com.team1.issuetracker.data.datasource.LoginDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginRepositoryImpl_Factory implements Factory<LoginRepositoryImpl> {
  private final Provider<LoginDataSource> dataSourceProvider;

  private final Provider<AppSession> appSessionProvider;

  public LoginRepositoryImpl_Factory(Provider<LoginDataSource> dataSourceProvider,
      Provider<AppSession> appSessionProvider) {
    this.dataSourceProvider = dataSourceProvider;
    this.appSessionProvider = appSessionProvider;
  }

  @Override
  public LoginRepositoryImpl get() {
    return newInstance(dataSourceProvider.get(), appSessionProvider.get());
  }

  public static LoginRepositoryImpl_Factory create(Provider<LoginDataSource> dataSourceProvider,
      Provider<AppSession> appSessionProvider) {
    return new LoginRepositoryImpl_Factory(dataSourceProvider, appSessionProvider);
  }

  public static LoginRepositoryImpl newInstance(LoginDataSource dataSource, AppSession appSession) {
    return new LoginRepositoryImpl(dataSource, appSession);
  }
}
