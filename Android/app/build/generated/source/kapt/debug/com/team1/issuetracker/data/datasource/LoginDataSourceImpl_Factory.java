// Generated by Dagger (https://dagger.dev).
package com.team1.issuetracker.data.datasource;

import com.team1.issuetracker.data.network.AuthApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginDataSourceImpl_Factory implements Factory<LoginDataSourceImpl> {
  private final Provider<AuthApi> authApiProvider;

  public LoginDataSourceImpl_Factory(Provider<AuthApi> authApiProvider) {
    this.authApiProvider = authApiProvider;
  }

  @Override
  public LoginDataSourceImpl get() {
    return newInstance(authApiProvider.get());
  }

  public static LoginDataSourceImpl_Factory create(Provider<AuthApi> authApiProvider) {
    return new LoginDataSourceImpl_Factory(authApiProvider);
  }

  public static LoginDataSourceImpl newInstance(AuthApi authApi) {
    return new LoginDataSourceImpl(authApi);
  }
}
