// Generated by Dagger (https://dagger.dev).
package com.team1.issuetracker.data.di;

import com.team1.issuetracker.data.network.MilestoneApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProvideMilestoneApiFactory implements Factory<MilestoneApi> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetWorkModule_ProvideMilestoneApiFactory(Provider<OkHttpClient> okHttpClientProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public MilestoneApi get() {
    return provideMilestoneApi(okHttpClientProvider.get());
  }

  public static NetWorkModule_ProvideMilestoneApiFactory create(
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetWorkModule_ProvideMilestoneApiFactory(okHttpClientProvider);
  }

  public static MilestoneApi provideMilestoneApi(OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetWorkModule.INSTANCE.provideMilestoneApi(okHttpClient));
  }
}
