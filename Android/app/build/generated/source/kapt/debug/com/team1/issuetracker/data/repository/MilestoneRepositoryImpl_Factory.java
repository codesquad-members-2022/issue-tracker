// Generated by Dagger (https://dagger.dev).
package com.team1.issuetracker.data.repository;

import com.team1.issuetracker.data.datasource.MilestoneDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MilestoneRepositoryImpl_Factory implements Factory<MilestoneRepositoryImpl> {
  private final Provider<MilestoneDataSource> dataSourceProvider;

  public MilestoneRepositoryImpl_Factory(Provider<MilestoneDataSource> dataSourceProvider) {
    this.dataSourceProvider = dataSourceProvider;
  }

  @Override
  public MilestoneRepositoryImpl get() {
    return newInstance(dataSourceProvider.get());
  }

  public static MilestoneRepositoryImpl_Factory create(
      Provider<MilestoneDataSource> dataSourceProvider) {
    return new MilestoneRepositoryImpl_Factory(dataSourceProvider);
  }

  public static MilestoneRepositoryImpl newInstance(MilestoneDataSource dataSource) {
    return new MilestoneRepositoryImpl(dataSource);
  }
}
