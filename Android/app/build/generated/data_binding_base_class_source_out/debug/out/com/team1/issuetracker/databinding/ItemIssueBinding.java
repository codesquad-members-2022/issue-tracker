// Generated by data binding compiler. Do not edit!
package com.team1.issuetracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.team1.issuetracker.R;
import com.team1.issuetracker.data.model.Issue;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ItemIssueBinding extends ViewDataBinding {
  @NonNull
  public final MaterialCheckBox checkbox;

  @NonNull
  public final ConstraintLayout clCheckbox;

  @NonNull
  public final MaterialCardView cvLabel;

  @NonNull
  public final View emptyView1;

  @NonNull
  public final View emptyView11;

  @NonNull
  public final View emptyView2;

  @NonNull
  public final View emptyView3;

  @NonNull
  public final View emptyView4;

  @NonNull
  public final View emptyView5;

  @NonNull
  public final View emptyViewStart;

  @NonNull
  public final ConstraintLayout eraseItemView;

  @NonNull
  public final Guideline glH30;

  @NonNull
  public final Guideline glV9556;

  @NonNull
  public final ImageView ivClose;

  @NonNull
  public final ImageView ivMilestone;

  @NonNull
  public final ConstraintLayout swipeView;

  @NonNull
  public final TextView tvClose;

  @NonNull
  public final TextView tvIssueContent;

  @NonNull
  public final TextView tvLabel;

  @NonNull
  public final TextView tvMilestone;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final View viewBottom;

  @NonNull
  public final View viewEnd;

  @NonNull
  public final View viewForContent;

  @NonNull
  public final View viewLine;

  @NonNull
  public final View viewStart;

  @NonNull
  public final View viewTop;

  @Bindable
  protected Issue mIssue;

  protected ItemIssueBinding(Object _bindingComponent, View _root, int _localFieldCount,
      MaterialCheckBox checkbox, ConstraintLayout clCheckbox, MaterialCardView cvLabel,
      View emptyView1, View emptyView11, View emptyView2, View emptyView3, View emptyView4,
      View emptyView5, View emptyViewStart, ConstraintLayout eraseItemView, Guideline glH30,
      Guideline glV9556, ImageView ivClose, ImageView ivMilestone, ConstraintLayout swipeView,
      TextView tvClose, TextView tvIssueContent, TextView tvLabel, TextView tvMilestone,
      TextView tvTitle, View viewBottom, View viewEnd, View viewForContent, View viewLine,
      View viewStart, View viewTop) {
    super(_bindingComponent, _root, _localFieldCount);
    this.checkbox = checkbox;
    this.clCheckbox = clCheckbox;
    this.cvLabel = cvLabel;
    this.emptyView1 = emptyView1;
    this.emptyView11 = emptyView11;
    this.emptyView2 = emptyView2;
    this.emptyView3 = emptyView3;
    this.emptyView4 = emptyView4;
    this.emptyView5 = emptyView5;
    this.emptyViewStart = emptyViewStart;
    this.eraseItemView = eraseItemView;
    this.glH30 = glH30;
    this.glV9556 = glV9556;
    this.ivClose = ivClose;
    this.ivMilestone = ivMilestone;
    this.swipeView = swipeView;
    this.tvClose = tvClose;
    this.tvIssueContent = tvIssueContent;
    this.tvLabel = tvLabel;
    this.tvMilestone = tvMilestone;
    this.tvTitle = tvTitle;
    this.viewBottom = viewBottom;
    this.viewEnd = viewEnd;
    this.viewForContent = viewForContent;
    this.viewLine = viewLine;
    this.viewStart = viewStart;
    this.viewTop = viewTop;
  }

  public abstract void setIssue(@Nullable Issue issue);

  @Nullable
  public Issue getIssue() {
    return mIssue;
  }

  @NonNull
  public static ItemIssueBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_issue, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ItemIssueBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ItemIssueBinding>inflateInternal(inflater, R.layout.item_issue, root, attachToRoot, component);
  }

  @NonNull
  public static ItemIssueBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.item_issue, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ItemIssueBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ItemIssueBinding>inflateInternal(inflater, R.layout.item_issue, null, false, component);
  }

  public static ItemIssueBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ItemIssueBinding bind(@NonNull View view, @Nullable Object component) {
    return (ItemIssueBinding)bind(component, view, R.layout.item_issue);
  }
}
